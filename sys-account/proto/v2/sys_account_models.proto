syntax = "proto3";

import "google/protobuf/timestamp.proto";

package v2.sys_account.services;

option go_package = "github.com/amplify-cms/sys-share/sys-account/service/go/rpc/v2";

message ErrorReason {
  string reason = 1;
}

message RegisterRequest {
  // @inject_tag: fake:"{mailseq:user,false,none,false}" yaml:"email"
  string email = 1;
  string password = 2;
  string password_confirm = 3;
  UserRoles user_role = 4;
}

message LoginRequest {
  // @inject_tag: fake:"{mailseq:ops,false,none,false}" yaml:"email"
  string email = 1;
  // @inject_tag: fake:"{password:true,true,true,false,false,16}" yaml:"password"
  string password = 2;
}

message LoginResponse {
  bool success = 1;
  string access_token = 2;
  string refresh_token = 3;
  ErrorReason error_reason = 4;
  google.protobuf.Timestamp last_login = 5;
}

message RegisterResponse {
  bool success = 1;
  string success_msg = 2;
  ErrorReason error_reason = 3;
  string verify_token = 4;
  string temp_user_id = 5;
}

message ForgotPasswordRequest {
  string email = 1;
}

message ForgotPasswordResponse {
  bool success = 1;
  string success_msg = 2;
  ErrorReason error_reason = 3;
  google.protobuf.Timestamp forgot_password_requested_at = 4;
}

message ResetPasswordRequest {
  string email = 1;
  string password = 2;
  string password_confirm = 3;
  string verify_token = 4;
}

message ResetPasswordResponse {
  bool success = 1;
  string success_msg = 2;
  ErrorReason error_reason = 3;
  google.protobuf.Timestamp reset_password_requested_at = 4;
}

message RefreshAccessTokenRequest {
  string refresh_token = 1;
}

message RefreshAccessTokenResponse {
  string access_token = 1;
  ErrorReason error_reason = 2;
}

message UserDefinedFields {
  bytes fields = 1;
}

message VerifyAccountRequest {
  string verify_token = 1;
  string account_id = 2;
}

// UserRoles for now
enum Roles {
  INVALID = 0;
  GUEST = 1;
  USER = 2;
  ADMIN = 3; // can be Org or Project Admin
  SUPERADMIN = 4; // can do all
}

// resource: Project
message Project {
  string id = 1;
  string name = 2;
  string logo_resource_id = 3;
  google.protobuf.Timestamp created_at = 4;
  string creator_id = 5;
  string org_id = 6;
  Org org = 7;
  bytes logo = 8;
}

message ProjectRequest {
  // @inject_tag: fake:"{nameseq:sys_account_project,false,none,false,false}" yaml:"name,omitempty"
  string name = 1;
  // @inject_tag: fake:"skip" yaml:"logo_filepath,omitempty"
  string logo_filepath = 2;
  // @inject_tag: fake:"{randomstring:[ops@amplify-cms.org, dev@amplify-cms.org]}" yaml:"creator_id,omitempty"
  string creator_id = 3;
  // @inject_tag: fake:"skip" yaml:"org_id,omitempty"
  string org_id = 4;
  // @inject_tag: fake:"{nameseq:sys_account_org,true,sys_account_org,false,false}" yaml:"org_name,omitempty"
  string org_name = 5;
  // @inject_tag: fake:"{logogen:128}" yaml:"logo_upload_bytes,omitempty"
  string logo_upload_bytes = 6;
}

message ProjectUpdateRequest {
  string id = 1;
  string name = 2;
  string logo_filepath = 3;
  bytes logo_upload_bytes = 4;
}

// resource: Org
message Org {
  string id = 1;
  string name = 2;
  string logo_resource_id = 3;
  string contact = 4;
  google.protobuf.Timestamp created_at = 5;
  string creator_id = 6;
  repeated Project projects = 7;
  bytes logo = 8;
}

message OrgRequest {
  // @inject_tag: fake:"{nameseq:sys_account_org,false,none,false,false}" yaml:"name,omitempty"
  string name = 1;
  // @inject_tag: fake:"skip" yaml:"logo_filepath,omitempty"
  string logo_filepath = 2;
  // @inject_tag: fake:"{email}" yaml:"contact,omitempty"
  string contact = 3;
  // @inject_tag: fake:"{randomstring:[ops@amplify-cms.org,contact@amplify-cms.org]}" yaml:"creator_id,omitempty"
  string creator_id = 4;
  // @inject_tag: fake:"{logogen:128}" yaml:"logo_upload_bytes,omitempty"
  string logo_upload_bytes = 5;
}

message OrgUpdateRequest {
  string id = 1;
  string name = 2;
  string contact = 3;
  string logo_filepath = 4;
  bytes logo_upload_bytes = 5;
}

message IdRequest {
  string id = 1;
  string name = 2;
}

message ListRequest {
  // limit
  int64 per_page_entries = 1;
  string order_by = 2;
  // number 3 => optional: current_page_id is the last id of the
  // (current) listed Accounts for pagination purpose (cursor).
  string current_page_id = 3;
  bool is_descending = 4;
  bytes filters = 5;
  string account_id = 6;
  string matcher = 7;
}

message ListResponse {
  repeated Project projects = 1;
  repeated Org orgs = 2;
  string next_page_id = 3;
}


// UserRole as a message is super simple
// and probably not the very best
// it defines the role as an enum of Roles
// alongside either None (for guest)
// or All ( superadmin)
// or specific project by its id (Project admin)
// or specific org by its id (Org admin)
message UserRoles {
  // @inject_tag: fake:"{number:1,3}" yaml:"role"
  Roles role = 1;
  string project_id = 2;
  string org_id = 3;
}

message NewUserRoles {
  // @inject_tag: fake:"{number:2,3}" yaml:"role"
  Roles role = 1;
  // @inject_tag: fake:"skip" yaml:"project_id,omitempty"
  string project_id = 2;
  // @inject_tag: fake:"skip" yaml:"org_id,omitempty"
  string org_id = 3;
  // @inject_tag: fake:"{nameseq:sys_account_project,true,sys_account_project,false,false}" yaml:"project_name,omitempty"
  string project_name = 4;
}

// Permission effectively controls access to specific resources
// for any account.
message Permission {
  string resource = 1; // resource can be database table or path to URL or anything else
  string resource_kind = 2; // describes the first resource type (i.e. db table, or path)
  repeated string activities = 3; // activities are i.e. view, write, modify, delete
}

message Account {
  string id = 1;
  string email = 2;
  string password = 3;
  repeated UserRoles roles = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  google.protobuf.Timestamp last_login = 7;
  bool disabled = 8;
  bool verified = 9;
  string avatar_resource_id = 10; // local upload i.e. bootstrap
  bytes avatar = 11;
}

message AccountNewRequest {
  // @inject_tag: fake:"{mailseq:user,false,none,false}" yaml:"email,omitempty"
  string email = 1;
  // @inject_tag: fake:"{password}" yaml:"password,omitempty"
  string password = 2;
  // @inject_tag: fake:"skip" yaml:"roles,omitempty"
  repeated UserRoles roles = 3;
  // @inject_tag: fake:"skip" yaml:"avatar_filepath,omitempty"
  string avatar_filepath = 4; // local upload i.e. bootstrap, remote upload will be user's directory
  // @inject_tag: fake:"{logogen:100}" yaml:"avatar_upload_bytes,omitempty"
  string avatar_upload_bytes = 5; // raw bytes upload for remote upload
  // @inject_tag: fakesize:"1" yaml:"new_user_roles,omitempty"
  repeated NewUserRoles new_user_roles = 6;
}

message AccountUpdateRequest {
  string id = 1;
  string email = 2;
  string password = 3;
  bool disabled = 4;
  bool verified = 5;
  string avatar_filepath = 6;
  bytes avatar_upload_bytes = 7;
}

message GetAccountRequest {
  string id = 1;
}

message ListAccountsRequest {
  // limit
  int64 per_page_entries = 1;
  string order_by = 2;
  // number 3 => optional: current_page_id is the last id of the
  // (current) listed Accounts for pagination purpose (cursor).
  string current_page_id = 3;
  bool is_descending = 4;
  bytes filters = 5;
  string matcher = 6;
}

message ListAccountsResponse {
  repeated Account accounts = 1;
  // similarly, next_page token is the cursor for the next request
  string next_page_id = 2;
}

message SearchAccountsRequest {
  // query can be either email, UserDefinedFields fields
  bytes query = 1;
  ListAccountsRequest search_params = 2;
}

message SearchAccountsResponse {
  ListAccountsResponse search_response = 1;
}

message AssignAccountToRoleRequest {
  string assignee_account_id = 1; // current account's id (to check for privilege)
  string assigned_account_id = 2; // account id to be assigned to role.
  UserRoles role = 3;
}

message DisableAccountRequest {
  string account_id = 1;
}
