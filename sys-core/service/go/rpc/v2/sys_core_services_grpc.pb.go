// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbAdminServiceClient is the client API for DbAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbAdminServiceClient interface {
	Backup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BackupAllResult, error)
	ListBackup(ctx context.Context, in *ListBackupRequest, opts ...grpc.CallOption) (*ListBackupResult, error)
	Restore(ctx context.Context, in *RestoreAllRequest, opts ...grpc.CallOption) (*RestoreAllResult, error)
}

type dbAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbAdminServiceClient(cc grpc.ClientConnInterface) DbAdminServiceClient {
	return &dbAdminServiceClient{cc}
}

func (c *dbAdminServiceClient) Backup(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BackupAllResult, error) {
	out := new(BackupAllResult)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.DbAdminService/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminServiceClient) ListBackup(ctx context.Context, in *ListBackupRequest, opts ...grpc.CallOption) (*ListBackupResult, error) {
	out := new(ListBackupResult)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.DbAdminService/ListBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAdminServiceClient) Restore(ctx context.Context, in *RestoreAllRequest, opts ...grpc.CallOption) (*RestoreAllResult, error) {
	out := new(RestoreAllResult)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.DbAdminService/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbAdminServiceServer is the server API for DbAdminService service.
// All implementations must embed UnimplementedDbAdminServiceServer
// for forward compatibility
type DbAdminServiceServer interface {
	Backup(context.Context, *emptypb.Empty) (*BackupAllResult, error)
	ListBackup(context.Context, *ListBackupRequest) (*ListBackupResult, error)
	Restore(context.Context, *RestoreAllRequest) (*RestoreAllResult, error)
	mustEmbedUnimplementedDbAdminServiceServer()
}

// UnimplementedDbAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDbAdminServiceServer struct {
}

func (UnimplementedDbAdminServiceServer) Backup(context.Context, *emptypb.Empty) (*BackupAllResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedDbAdminServiceServer) ListBackup(context.Context, *ListBackupRequest) (*ListBackupResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackup not implemented")
}
func (UnimplementedDbAdminServiceServer) Restore(context.Context, *RestoreAllRequest) (*RestoreAllResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedDbAdminServiceServer) mustEmbedUnimplementedDbAdminServiceServer() {}

// UnsafeDbAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbAdminServiceServer will
// result in compilation errors.
type UnsafeDbAdminServiceServer interface {
	mustEmbedUnimplementedDbAdminServiceServer()
}

func RegisterDbAdminServiceServer(s grpc.ServiceRegistrar, srv DbAdminServiceServer) {
	s.RegisterService(&DbAdminService_ServiceDesc, srv)
}

func _DbAdminService_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminServiceServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.sys_core.services.DbAdminService/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminServiceServer).Backup(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminService_ListBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminServiceServer).ListBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.sys_core.services.DbAdminService/ListBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminServiceServer).ListBackup(ctx, req.(*ListBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAdminService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAdminServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.sys_core.services.DbAdminService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAdminServiceServer).Restore(ctx, req.(*RestoreAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbAdminService_ServiceDesc is the grpc.ServiceDesc for DbAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.sys_core.services.DbAdminService",
	HandlerType: (*DbAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Backup",
			Handler:    _DbAdminService_Backup_Handler,
		},
		{
			MethodName: "ListBackup",
			Handler:    _DbAdminService_ListBackup_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _DbAdminService_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_core_services.proto",
}

// BusServiceClient is the client API for BusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusServiceClient interface {
	Broadcast(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type busServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBusServiceClient(cc grpc.ClientConnInterface) BusServiceClient {
	return &busServiceClient{cc}
}

func (c *busServiceClient) Broadcast(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.BusService/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusServiceServer is the server API for BusService service.
// All implementations must embed UnimplementedBusServiceServer
// for forward compatibility
type BusServiceServer interface {
	Broadcast(context.Context, *EventRequest) (*EventResponse, error)
	mustEmbedUnimplementedBusServiceServer()
}

// UnimplementedBusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBusServiceServer struct {
}

func (UnimplementedBusServiceServer) Broadcast(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedBusServiceServer) mustEmbedUnimplementedBusServiceServer() {}

// UnsafeBusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusServiceServer will
// result in compilation errors.
type UnsafeBusServiceServer interface {
	mustEmbedUnimplementedBusServiceServer()
}

func RegisterBusServiceServer(s grpc.ServiceRegistrar, srv BusServiceServer) {
	s.RegisterService(&BusService_ServiceDesc, srv)
}

func _BusService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.sys_core.services.BusService/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusServiceServer).Broadcast(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusService_ServiceDesc is the grpc.ServiceDesc for BusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.sys_core.services.BusService",
	HandlerType: (*BusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _BusService_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_core_services.proto",
}

// EmailServiceClient is the client API for EmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailServiceClient interface {
	SendMail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error)
}

type emailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailServiceClient(cc grpc.ClientConnInterface) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) SendMail(ctx context.Context, in *EmailRequest, opts ...grpc.CallOption) (*EmailResponse, error) {
	out := new(EmailResponse)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.EmailService/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailServiceServer is the server API for EmailService service.
// All implementations must embed UnimplementedEmailServiceServer
// for forward compatibility
type EmailServiceServer interface {
	SendMail(context.Context, *EmailRequest) (*EmailResponse, error)
	mustEmbedUnimplementedEmailServiceServer()
}

// UnimplementedEmailServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailServiceServer struct {
}

func (UnimplementedEmailServiceServer) SendMail(context.Context, *EmailRequest) (*EmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedEmailServiceServer) mustEmbedUnimplementedEmailServiceServer() {}

// UnsafeEmailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailServiceServer will
// result in compilation errors.
type UnsafeEmailServiceServer interface {
	mustEmbedUnimplementedEmailServiceServer()
}

func RegisterEmailServiceServer(s grpc.ServiceRegistrar, srv EmailServiceServer) {
	s.RegisterService(&EmailService_ServiceDesc, srv)
}

func _EmailService_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.sys_core.services.EmailService/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendMail(ctx, req.(*EmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailService_ServiceDesc is the grpc.ServiceDesc for EmailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.sys_core.services.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMail",
			Handler:    _EmailService_SendMail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_core_services.proto",
}

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	SendAnalyticsEvent(ctx context.Context, in *ModEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DownloadAnalytics(ctx context.Context, in *DownloadAnalyticsRequest, opts ...grpc.CallOption) (*DownloadAnalyticsResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) SendAnalyticsEvent(ctx context.Context, in *ModEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.AnalyticsService/SendAnalyticsEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) DownloadAnalytics(ctx context.Context, in *DownloadAnalyticsRequest, opts ...grpc.CallOption) (*DownloadAnalyticsResponse, error) {
	out := new(DownloadAnalyticsResponse)
	err := c.cc.Invoke(ctx, "/v2.sys_core.services.AnalyticsService/DownloadAnalytics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility
type AnalyticsServiceServer interface {
	SendAnalyticsEvent(context.Context, *ModEvent) (*emptypb.Empty, error)
	DownloadAnalytics(context.Context, *DownloadAnalyticsRequest) (*DownloadAnalyticsResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServiceServer struct {
}

func (UnimplementedAnalyticsServiceServer) SendAnalyticsEvent(context.Context, *ModEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAnalyticsEvent not implemented")
}
func (UnimplementedAnalyticsServiceServer) DownloadAnalytics(context.Context, *DownloadAnalyticsRequest) (*DownloadAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_SendAnalyticsEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).SendAnalyticsEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.sys_core.services.AnalyticsService/SendAnalyticsEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).SendAnalyticsEvent(ctx, req.(*ModEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_DownloadAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).DownloadAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.sys_core.services.AnalyticsService/DownloadAnalytics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).DownloadAnalytics(ctx, req.(*DownloadAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v2.sys_core.services.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAnalyticsEvent",
			Handler:    _AnalyticsService_SendAnalyticsEvent_Handler,
		},
		{
			MethodName: "DownloadAnalytics",
			Handler:    _AnalyticsService_DownloadAnalytics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys_core_services.proto",
}
